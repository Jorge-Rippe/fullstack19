/* 
TRIGGERS, FUNCIONES Y PROCEDIMIENTOS
*/


/*FUNCIONES NATIVAS DE POSTGRESQL
ARITMETICAS SUM, COUNT...
CADENAS
ENCRIPTACION
*/

SELECT CONCAT(LOWER(NOMBRE), ' ', LOWER(APELLIDO)) AS NOMBRE_COMPLETO FROM ESTUDIANTE;

SELECT NOMBRE, APELLIDO, MD5(CONCAT(NOMBRE, APELLIDO)) AS CONTRASENA FROM ESTUDIANTE;

SELECT COUNT(*) FROM ESTUDIANTE;

/*FUNCIONES PROPIAS*/

CREATE OR REPLACE FUNCTION EDAD_MAXIMA(CURSO_ID INTEGER) RETURNS INTEGER AS $$
DECLARE 
    EDAD_MAXIMA INTEGER;
BEGIN
	SELECT MAX(EDAD) INTO EDAD_MAXIMA FROM ESTUDIANTE WHERE ID_CURSO = CURSO_ID;
	RETURN EDAD_MAXIMA;
END;
$$ LANGUAGE plpgsql;

SELECT CONTAR_ESTUDIANTES(2)

SELECT EDAD_MAXIMA(7)

/*EJEMPLO TRIGGER*/

CREATE OR REPLACE FUNCTION VALIDAR_EDAD()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.EDAD < 18 THEN
   RAISE EXCEPTION 'EDAD NO VALIDA';
  END IF;
 RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER VALIDAR_EDAD_TRIGGER
BEFORE INSERT ON ESTUDIANTE
FOR EACH ROW
EXECUTE FUNCTION VALIDAR_EDAD();

INSERT INTO ESTUDIANTE(
    NOMBRE, APELLIDO, CORREO, EDAD, FECHA_NACIMIENTO, ID_CURSO) VALUES
('XIMENA', 'VALDERRAMA', 'XIMENAVALDERRAMA@gmail.com', 19, '1999-02-02', 1);

SELECT * FROM ESTUDIANTE;

/* PROCEDIMIENTOS ALMACENADOS*/
CREATE OR REPLACE PROCEDURE INSCRIBIR_ESTUDIANTE(
    NOMBRE_E VARCHAR(50),
    APELLIDO_E VARCHAR(50),
    CORREO_E VARCHAR(50),
    EDAD_E INTEGER,
    FECHA_NACIMIENTO_E DATE,
    ID_CURSO_E INTEGER)
    LANGUAGE PLPGSQL
AS $$
BEGIN
    INSERT INTO ESTUDIANTE(NOMBRE, APELLIDO, CORREO, EDAD, FECHA_NACIMIENTO, ID_CURSO)
    VALUES (NOMBRE_E, APELLIDO_E, CORREO_E, EDAD_E, FECHA_NACIMIENTO_E, ID_CURSO_E);
END;
$$;
CALL INSCRIBIR_ESTUDIANTE('lILIANA', 'BUENAVENTURA', 'LILIANA BUENABENTURA@GMAIL.COM', 19, '1999-02-02', 1);

CREATE OR REPLACE PROCEDURE MATRICULAR_ESTUDIANTE(
    NOMBRE_E VARCHAR(50),
    APELLIDO_E VARCHAR(50),
    CORREO_E VARCHAR(50),
    EDAD_E INTEGER,
    FECHA_NACIMIENTO_E DATE,
    ID_CURSO_E INTEGER)
    LANGUAGE PLPGSQL
AS $$
DECLARE NUEVO_ID INTEGER;
BEGIN
    INSERT INTO ESTUDIANTE(NOMBRE, APELLIDO, CORREO, EDAD, FECHA_NACIMIENTO, ID_CURSO)
    VALUES (NOMBRE_E, APELLIDO_E, CORREO_E, EDAD_E, FECHA_NACIMIENTO_E, ID_CURSO_E)
    RETURNING ID INTO NUEVO_ID;
    INSERT INTO MATRICULA(FECHA_MATRICULA, ID_ESTUDIANTE)
    VALUES (CURRENT_DATE, NUEVO_ID);
END;
$$;

CALL MATRICULAR_ESTUDIANTE('camila', 'sabogal', 'camilasabogal@gmail.com', 19, '1999-02-02', 1);

SELECT * FROM ESTUDIANTE;
SELECT * FROM MATRICULA